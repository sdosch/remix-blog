{
  "version": 3,
  "sources": ["browser-route-module:/Users/sdosch/src/remix/blog/app/routes/admin/$slug.delete.tsx?browser", "../../../../app/routes/admin/$slug.delete.tsx"],
  "sourcesContent": ["export { default } from \"/Users/sdosch/src/remix/blog/app/routes/admin/$slug.delete.tsx\";", "import { useEffect, useState } from \"react\";\nimport {\n  ActionFunction,\n  Form,\n  LoaderFunction,\n  redirect,\n  useActionData,\n  useTransition,\n} from \"remix\";\nimport { useLoaderData } from \"remix\";\nimport invariant from \"tiny-invariant\";\n\nimport { deletePost, getPost, NewPost } from \"~/post\";\n\ntype PostError = {\n  title?: boolean;\n  slug?: boolean;\n  markdown?: boolean;\n};\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  invariant(params.slug, \"expected params.slug\");\n  return getPost(params.slug);\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  await new Promise((res) => setTimeout(res, 1000));\n\n  const formData = await request.formData();\n\n  const slug = formData.get(\"slug\");\n\n  const errors: PostError = {};\n  if (!slug) errors.slug = true;\n\n  if (Object.keys(errors).length) {\n    return errors;\n  }\n  invariant(typeof slug === \"string\");\n  await deletePost(slug);\n\n  return redirect(\"/admin\");\n};\n\nexport default function DeletePost() {\n  const errors = useActionData();\n  const transition = useTransition();\n  const loaderData = useLoaderData();\n  const [post, setPost] = useState<NewPost>(loaderData);\n  useEffect(() => {\n    setPost(loaderData);\n  }, [transition]);\n  return (\n    <Form method=\"post\">\n      <p>\n        <button type=\"submit\">\n          {transition.submission ? \"Deleting...\" : \"Delete Post\"}\n        </button>\n      </p>\n    </Form>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;AAAA;;;ACAA;AAAA,mBAAoC;AA4CrB,sBAAsB;AACnC,QAAM,SAAS;AACf,QAAM,aAAa;AACnB,QAAM,aAAa;AACnB,QAAM,CAAC,MAAM,WAAW,2BAAkB;AAC1C,8BAAU,MAAM;AACd,YAAQ;AAAA,KACP,CAAC;AACJ,SACE,oCAAC,MAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,KAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,KACV,WAAW,aAAa,gBAAgB;AAAA;",
  "names": []
}
